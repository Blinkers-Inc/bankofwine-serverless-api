# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: bankofwine-serverless-api
frameworkVersion: "*"
useDotenv: true

provider:
  name: aws
  profile: blinkers
  runtime: nodejs16.x
  region: ap-northeast-2
  stage: ${opt:stage, "dev"}
  environment:
    STAGE: ${self:provider.stage}
  timeout: 29
  tracing:
    lambda: true
  deploymentBucket:
    name: bankofwine-serverless-api-${self:provider.stage}
    serverSideEncryption: AES256
  iam:
    role:
      name: bankofwine-serverless-role-${self:provider.stage}
      statements:
        - Effect: "Allow"
          Action:
            - cloudformation:*
            - logs:*
            - lambda:*
            - s3:*
          Resource: "*"

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-webpack-prisma
  - serverless-offline

custom:
  provisionedConcurrency:
    dev: 3
    prod: 20
  webpack:
    excludeRegex: \.ts|test|\.map
    includeModules:
      forceExclude:
        - aws-sdk
    packager: npm # Packager that will be used to package your external modules
    packagerOptions:
      scripts:
        - prisma generate
        - npx rimraf "node_modules/@types"
        - npx rimraf "node_modules/aws-sdk"

package:
  individually: true
  patterns:
    - "./src/prisma/*"
    - "node_modules/.prisma/client/*"
    - "!node_modules/.prisma/client/libquery_engine-*"
    - "node_modules/.prisma/client/libquery_engine-rhel-*"
    - "!node_modules/prisma/libquery_engine-*"
    - "!node_modules/@prisma/engines/**"

functions:
  graphql:
    handler: src/serverless.handler
    name: graphql-${self:provider.stage}
    events:
      - http:
          cors: true
          path: /graphql
          method: any
    provisionedConcurrency: ${self:custom.provisionedConcurrency.${opt:stage, self:provider.stage}}
